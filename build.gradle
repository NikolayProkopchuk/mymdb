plugins {
    id 'org.springframework.boot' version '3.0.0'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'java'
    id 'checkstyle'
    id 'jacoco'
    id 'net.researchgate.release' version '3.0.2'
}

group = 'com.prokopchuk'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

release {
    tagTemplate = 'v${version}'
    git {
        requireBranch.set('master')
    }
}

ext {
    postgresqlVersion = '42.5.1'
    flywayVersion = '9.10.0'
    mapstructVersion = '1.5.3.Final'
    jsonwebtokenVersion = '0.11.5'
    apacheCommonsVersion = '3.12.0'
    testContainersVersion = '1.17.6'
    jacartaValidationVersion = '3.0.2'
    hibernateValidatorVersion = '8.0.0.Final'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation "org.postgresql:postgresql:${postgresqlVersion}"
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    implementation "io.jsonwebtoken:jjwt-api:${jsonwebtokenVersion}"
    implementation "io.jsonwebtoken:jjwt-impl:${jsonwebtokenVersion}"
    implementation "io.jsonwebtoken:jjwt-jackson:${jsonwebtokenVersion}"
    implementation "org.flywaydb:flyway-core:${flywayVersion}"
    implementation "org.apache.commons:commons-lang3:${apacheCommonsVersion}"
    implementation "jakarta.validation:jakarta.validation-api:${jacartaValidationVersion}"
    implementation "org.hibernate.validator:hibernate-validator:${hibernateValidatorVersion}"
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation "org.testcontainers:testcontainers:${testContainersVersion}"
    testImplementation "org.testcontainers:junit-jupiter:${testContainersVersion}"
    testImplementation "org.testcontainers:postgresql:${testContainersVersion}"
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.named("bootBuildImage") {
    imageName = "nikolay880410/${project.name}:${version}"
    tags = ["nikolay880410/${project.name}:latest"]
    publish = true
    docker {
        publishRegistry {
            username = project.property('dockerUser')
            password = project.property('dockerPassword')
            url = "https://hub.docker.com/"
        }
    }
}

checkstyle {
    toolVersion "${checkstyle}"
    configFile file("${project.rootDir}/src/main/resources/config/checkstyle.xml")
    ignoreFailures = false
    maxWarnings = 0
    toolVersion = '10.3.1'
}

checkstyleMain {
    print "${project.rootDir}"
    enabled = gradle.startParameter.taskNames.contains('checkstyleMain')
    source = 'src/main/java'
}

checkstyleTest {
    enabled = gradle.startParameter.taskNames.contains('checkstyleTest')
    source = 'src/test/java'
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it)
        }))
    }
}
